
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.UnrecognizedOptionException;

import com.lpsmuseum.dto.MuseologicalObject;
import com.lpsmuseum.dto.object.Image;
import com.lpsmuseum.service.MuseologicalObjectService;
import com.lpsmuseum.service.builders.MuseologicalObjectBuilder;

public refines class Main {
	
	private MuseologicalObjectService service = new MuseologicalObjectService();
	
	// Verifies if this feature is present.
	public void verifyFeatures() {
		System.out.println("Img::verifyFeatures");
		
		Super().verifyFeatures();
		
		try {
			Class.forName("com.lpsmuseum.entity.ImageDO");
			features.put("image", true);
		} catch (ClassNotFoundException exception) {
			features.put("image", false);
		}
	}
	
	// Creates the options for this feature.
	public Options createOptions() {
		System.out.println("Img::createOptions");
		
		options = Super().createOptions();
		
		if ((Boolean) features.get("image")) {
			ActionOption image = new ActionOption("image", true, "Do an action with 'image' feature.");
			image.add("create");
			image.add("list");
			image.add("edit");
			image.add("delete");
			options.addOption(image);
			System.out.println("image added to options: " + options.getOption("image").getDescription());
		}
		
		return options;
	}
	
	// Verifies if the action input is valid for this feature.
	public boolean verifyOption(CommandLine line) throws ParseException {
		System.out.println("Img::verifyOption");
		
		String action = null;
		Scanner scanner = new Scanner(System.in);
		
		if (line.hasOption("image")) {
			action = line.getOptionValue("image");
			ActionOption option = (ActionOption) options.getOption("image");
			
			if (!option.isValid(action)) {
				scanner.close();
				
				throw new ParseException("Invalid action for image feature");
			}
			
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			if (action.equals("list")) {
				List<MuseologicalObject> objects = service.listObjects();
				System.out.println(" ID | Name                                     | Date      | Url");
				System.out.println("----+------------------------------------------+-----------+------------------------");
				for (Iterator it = objects.iterator(); it.hasNext(); ) {
					MuseologicalObject object = (MuseologicalObject) it.next();
					if (Image.class.equals(object.getClass())) {
						if (object.getId() < 10)
							System.out.print(" 0" + object.getId() + " | ");
						else
							System.out.print(" " + object.getId() + " | ");
						
						String objectName = object.getName();
						if (objectName.length() > 40)
							objectName = objectName.substring(0, 40);
						else while (objectName.length() < 40)
							objectName = objectName.concat(" ");
						System.out.print(objectName + " | ");
						
						System.out.println(dateFormat.format(object.getDate().getTime()) + " | ");
						
						System.out.println(((Image) object).getUrlAddress());
					}
				}
			} else if (action.equals("create")) {
				System.out.print("Name: ");
				String objectName = scanner.nextLine();
				System.out.print("Date (dd/MM/yyyy): ");
				String objectDate = scanner.nextLine();
				Calendar calendar = Calendar.getInstance();
				calendar.set(
						Integer.valueOf(objectDate.substring(objectDate.lastIndexOf("/") + 1)), 
						Integer.valueOf(objectDate.substring(objectDate.indexOf("/") + 1, objectDate.lastIndexOf("/"))), 
						Integer.valueOf(objectDate.substring(0, objectDate.indexOf("/"))));
				System.out.print("URL: ");
				String objectURL = scanner.nextLine();
				Image instance = new Image();
				instance.setUrlAddress(objectURL);
				
				service.createObject(new MuseologicalObjectBuilder().build(objectName, calendar, instance));
			} else if (action.equals("edit")) {
				scanner.reset();

				System.out.print("Id: ");
				Long objectId = scanner.nextLong();
				scanner.nextLine();
				
				MuseologicalObject object = service.findById(objectId);
				boolean doUpdate = false;
				
				if (!(object instanceof Image)) {
					System.out.println("How embarrassing, I can't retrieve the image with id=[" + objectId + "], either isn't an image instance, or doesn't exists, sorry. :(");
					
					scanner.close();
					
					return true;
				}
				Image image = (Image) object;
				
				System.out.print("Name [" + image.getName() + "]: ");
				String imageName = scanner.nextLine();
				if (!imageName.isEmpty()) {
					image.setName(imageName);
					
					doUpdate = true;
				}
				
				System.out.print("Date (dd/MM/yyyy) [" + dateFormat.format(image.getDate().getTime()) + "]: ");
				String imageDate = scanner.nextLine();
				if (!imageDate.isEmpty()) {
					Calendar calendar = Calendar.getInstance();
					calendar.set(
							Integer.valueOf(imageDate.substring(imageDate.lastIndexOf("/") + 1)), 
							Integer.valueOf(imageDate.substring(imageDate.indexOf("/") + 1, imageDate.lastIndexOf("/"))), 
							Integer.valueOf(imageDate.substring(0, imageDate.indexOf("/"))));
					image.setDate(calendar);
					
					if (!doUpdate)
						doUpdate = true;
				}
				
				System.out.print("URL [" + image.getUrlAddress() + "]: ");
				String imageURL = scanner.nextLine();
				if (!imageURL.isEmpty()) {
					image.setUrlAddress(imageURL);
					
					if (!doUpdate)
						doUpdate = true;
				}
				
				if (doUpdate) {
					service.editObject(object);
					
					System.out.println("The image with id=[" + objectId + "] was updated successfully!");
				} else {
					System.out.println("Not to do, sad... :/");
				}
			} else if (action.equals("delete")) {
				scanner.reset();
				
				System.out.print("Id: ");
				Long objectId = scanner.nextLong();
				
				service.deleteObject(objectId);
				
				System.out.println();
				try {
					service.findById(objectId);
					System.out.println("How embarrassing, I can't delete the image with id=[" + objectId + "], sorry. :(");
				} catch (NullPointerException exception) {
					System.out.println("The image with id=[" + objectId + "] was deleted successfully!");
				}
			}

			scanner.close();
			
			return true;
		}
		
		scanner.close();
		
		return Super().verifyOption(line);
	}

}
