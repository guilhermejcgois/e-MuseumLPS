
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;

public class Main {

	// Indicates what features the product has.
	protected Map features = new HashMap();
	// Indicates what options the current feature has.
	protected Options options = new Options();

	// Verifies if this feature is present.
	public void verifyFeatures() {
		System.out.println("M::verifyFeatures");
	}

	// Creates the options for this feature.
	public Options createOptions() {
		System.out.println("M::createOptions");
		
		// Adds the option with given action and description.
		options.addOption(ActionOption.builder("exit").desc("Exit the program.").build());
		
		return options;
	}

	// Verifies if the action input is valid for this feature.
	public boolean verifyOption(CommandLine line) throws ParseException {
		System.out.println("M::verifyOption");
		
		if (line == null) {
			return true;
		} else if (line.hasOption("exit")) {
			return false;
		}
		
		return true;
	}

	// "Go Flash, go!"
	public void go() {
		System.out.println("M::go");
		
		boolean goAhead = true;

		verifyFeatures();
		options = createOptions();

		CommandLineParser parser = new DefaultParser();
		Scanner scanner = new Scanner(System.in);
		
		// While there are commands to be executed, that is the command isn't "exit".
		while (goAhead) {
			try {
				System.out.print(">> ");
				String cmds = scanner.nextLine();

				// Just ignores commands empties.
				if (cmds.isEmpty())
					continue;

				// Without '-', not works.
				cmds = "-".concat(cmds);
				// Execute the command, if his is a valid action, 
				// 	and says if I still expect new commands.
				goAhead = verifyOption(parser.parse(options, cmds.split(" ")));
			} catch (ParseException exception) {
				// Help information not awesome, without beauty and good formatted.
				System.out.println();
				System.out.println("<feature> <action>");
				for (Iterator it = options.getOptions().iterator(); it.hasNext();) {
					Option option = (Option) it.next();
					System.out.print("    " + option.getOpt());
					// The feature have any action?
					if (option instanceof ActionOption) {
						Object actions[] = ((ActionOption) option).getActionArray();
						if (actions.length > 0)
							System.out.print("\t" + actions[0]);
						for (int i = 1; i < actions.length; i++)
							System.out.print("|" + actions[i]);
					}
					System.out.println("\t" + option.getDescription());
				}
				System.out.println();
			}
		}

		scanner.close();
		System.out.println("Good bye!!");
	}

	public static void main(String[] args) {
		new Main().go();
		
		System.exit(0);
	}

}
